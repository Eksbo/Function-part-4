'use script' ;
// Сделайте массив arr с тремя функциями. 
// Пусть первая возвращает через return число 1, вторая - число 2, третья - число 3. 

// let arr = [
// 	function() {return 1},
// 	function() {return 2},
// 	function() {return 3}
// ];

// Используя созданный вами массив arr выведите в консоль число 3,
//  вызвав соответствующую функцию. 
// console.log(arr[2]());

// Используя созданный вами массив arr найдите сумму результатов функций (без цикла). 
// console.log( arr[0]() + arr[1]() + arr[2]() );

// Переберите созданный вами массив arr циклом и выведите 
// результаты работы всех функций в консоль. 
// for (let i of arr){
//     console.log(i());
// }

// Сделайте объект с тремя функциями. Пусть первая возвращает через return число 1,
// вторая - число 2, третья - число 3.
//  С помощью созданных функций выведите в консоль сумму возвращаемых чисел. 

// let obj = {
//     f1 : () => { return 1 },
//     f2 : () => { return 2 },
//     f3 : () => { return 3 }
// }
// console.log(obj.f1() + obj.f2() + obj.f3() );

// Переберите созданный объект циклом и выведите результаты работы функций в консоль. 

// for (let i in obj){
//     console.log(obj[i]());
// }

// Сделайте объект с тремя функциями, каждая из которых будет принимать параметром массив с числами. 
// Сделайте так, чтобы первая функция возвращала сумму элементов массива,
//  вторая функция - сумму квадратов, а третья - сумму кубов. 

// let obj = {
// sum : (arr) => { let sum = 0 ; for (let k of arr ){ sum += k } ; return sum},
// square : (arr) =>{ let sum = 0 ; for (let k of arr ){ sum += k **2 } ; return sum },
// cube : (arr) => { let sum = 0 ; for (let k of arr ){ sum += k **3} ; return sum }
// } ;

// for (let i in obj) {
//     console.log(obj[i]([1 , 2 , 3]));
// }
 
// Сделайте функцию test, параметрами принимающую 3 функции. Передайте в нее первым параметром функцию,
//  возвращающую 1, вторым - функцию, возвращающую 
// 2, третьим - функцию, возвращающую 3. Выведите в консоль сумму результатов функций. 

// test (
//     () => { return 1 ;},
//     () => { return 2 ;},
//     () => { return 3 ;}
// ) ;
// function test (f1 , f2 , f3){
//     console.log(f1() + f2() + f3());
// }


// Сделайте функцию test, 
// параметрами принимающую 3 функции и возвращающую сумму 
// результатов переданных функций. 

// let f1 = () => { return 1 ;} ;
// let f2 = () => { return 2 ;} ;
// let f3 = () => { return 3 ;} ;

// get (f1 , f2 , f3) ;
//  function get (a ,b ,c){
//     console.log(a() + b() + c());
//  }

//Сделайте 3 функции, объявив их как Function Declaration и дав им имена 
// func1, func2 и func3. Пусть первая функция возвращает 1, вторая - 2, а третья - 3.
//  Передайте эти функции параметром в функцию test из предыдущей задачи. 

// function func1 () { return 1 ;} ;
// function func2 () { return 2 ;} ;
// function func3 () { return 3 ;} ;

//  function get (a ,b ,c){
//     console.log(a() + b() + c());
//  }
//  get (func1 , func2 , func3) ;

// Модифицируйте предыдущую задачу так,
//  чтобы функции были объявлены как Function Expression с теми же именами. 

// let func1 = () => { return 1 ;} ;
// let func2 = () => { return 2 ;} ;
// let func3 = () => { return 3 ;} ;

//  function get (a ,b ,c){
//     console.log(a() + b() + c());
//  }
//  get (func1 , func2 , func3) ;

// Скопируйте код моей функции test. Вызовите эту функцию, передав ей параметром анонимную функцию,
//  которая параметром будет принимать число и возвращать его куб. 

// test(function(num) {
// 	return num **3;
// });

// function test(func) {
// 	console.log(func(3));
// }

// Переделайте ваш код так, чтобы передаваемая функция была не анонимной, 
// а была определена как Function Declaration с именем func. 

// function cub(num) {
// 	return num **3;
// }
// function test(func) {
// 	console.log(func(3));
// }
// test(cub)

// Переделайте передаваемую функцию на Function Expression с тем же именем func. 

// let func = (num) => {
// 	return num **3;
// }
// function test(func) {
// 	console.log(func(3));
// }
// test(func) ;

// Пусть передаваемая функция теперь принимает два параметра и возвращает их сумму.
//  При вызове передаваемой функции внутри test 
// передайте в передаваемую функцию число 2 и число 3. Выведите алертом результат. 
// let f1 = () => {return 2;};
// let f2 = () => {return 3}; 
// test (f1 , f2 )  ;
// function test( a , b) {
//     console.log(a() + b());
// }

// Пусть функция test первым параметром принимает число, а вторым и третьим параметрами - функции,
//  также параметром принимающие числа.

// Пусть функция test возвращает сумму результатов переданных функций:
// function test(num, func1, func2) {
// 	return func1(num) + func2(num);
// }

// Вызовите функцию test, первым параметром передав число 3, вторым параметром функцию,
//  возводящую число в квадрат, а третьим - функцию, возводящую число в куб. 
//  Выведите результат работы в консоль. 

// function test(num, func1, func2) {
// 	return func1(num) + func2(num);
// }

// function f2 (num){return num = num **2};
// function f3 (num){return num = num **3};
// let k = 3 ;
// console.log(test(k , f2 , f3))

// Не подсматривая в мой код реализуйте такую же функцию test самостоятельно. 

// function test (arr ,func){
//     for( let i = 0 ; i < arr.length ; i ++){
//         arr[i] = func(arr[i])
//     }
//     return arr;
// }
// console.log(test ([2,4,6] ,  (n) => { return  n = n **2}));

// Вызовите созданную вами функцию test, передав ей параметром массив с числами.
//  Сделайте так, чтобы функция вернула массив с кубами этих чисел. 
// function test (arr ,func){
//     for( let i = 0 ; i < arr.length ; i ++){
//         arr[i] = func(arr[i])
//     }
//     return arr;
// }
//  let k = (n) => { return n **3};
//  let arr1 = [2 , 4 , 6] ;
//  console.log(test (arr1 ,k));

// Сделайте функцию func, которая параметрами будет принимать два числа,
//  а возвращать сумму квадрата первого числа с кубом второго числа. 
//  Сделайте для этого вспомогательную функцию square, возводящую число в квадрат, 
// и вспомогательную функцию cube, возводящую число в куб. 
//  function sum ( a , b ) { 
//   let square = (n) => { return n **2};
//   let cube = (n) => { return n**3 }
//   return square(a) + cube(b) ;
//  }
//  console.log(sum(2,4));

// Сделайте функцию func1, которая будучи вызвана вот так: func1()(), вернет число 
// 1. Сделайте аналогичную функцию func2, возвращающую число 
// 2. Найдите сумму результатов этих функций. 

// function func1 () {
//     return () => { return 1 } ;
// } ;

// function func2 () {
//     return () => { return 2 } ;
// } ;
// console.log(func1()() + func2()());

// Сделайте функцию func, которая будучи вызвана вот так: func()()()()(), вернет '!'. 

// function func (){
//     return () => {
//         return () => {
//             return () => {
//                 return () =>{
//                    return console.log('+++');
//                 }
//             }
//         }
//     }
// }
// func()()()()() ;

// Сделайте функцию func, которая будучи вызвана вот так:
//  func(2)(3)(4), вернет сумму переданных в параметры чисел. 
// function func(a){
//     return (b) => {
//         return (c) =>{ return console.log( a + b + c ); }
//     }
// }
// func(2)(3)(4)

// Сделайте функцию func, которая будучи вызвана вот так: func(1)(2)(3)(4)(5)(),
//  вернет массив переданных в параметры чисел.

// function func(a){
//     return (b) => {
//         return (c) => {
//             return (d) =>{
//                 return (e) =>{
//                     let arr =[a , b , c , d , e] ;
//                     return () => {console.log(arr);}
//                 }
//             }
//         }
//     }
// }
// func(1)(2)(3)(4)(5)()

// Самостоятельно, не подсматривая в мой код,
//  реализуйте счетчик вызова функции, работающий на замыканиях. 
// function upDigi () {
//     let n = 1 ;
//  return () => {
//     console.log(n);
//        n ++;
//     }
// }
// let k = upDigi() ;
// k();
// k();
// k();
// k();

// Пусть функция в замыкании хранит число 10. Сделайте так, 
// чтобы каждый вызов функции уменьшал это число на 1 и выводил в консоль уменьшенное число. 

// function downDigi (){
//     let n = 10 ;
//     return () => 
//     {
//         console.log(n);
//         n --;
//         if ( n == 0 ){
//             console.log("The End");
//         }
//     }

// }
// let k = downDigi () ;
// k();
// k();
// k();
// k();
// k();
// k();
// k();
// k();
// k();
// k();

//  Допишите следующий код так, чтобы его запуск алертом выводил '!':
// (function() {
	// какой-то код
// })()()();


//     +function () {
//     return function () {
//         return function ()  {
//             console.log('+');
//         }
//     }
// }
// ()()();



// Допишите следующий код так, чтобы его запуск выводил сумму переданных параметрами чисел:
// (function() {
// 	какой-то код
// })(1)(2);

// ( function g (a) 
// {
//     return (b) =>{

//         return console.log(a + b);
//     }

// })(1)(2)